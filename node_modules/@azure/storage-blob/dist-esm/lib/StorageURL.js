import { deserializationPolicy } from "ms-rest-js";
import { BrowserPolicyFactory } from "./BrowserPolicyFactory";
import { StorageClientContext } from "./generated/storageClientContext";
import { LoggingPolicyFactory } from "./LoggingPolicyFactory";
import { Pipeline } from "./Pipeline";
import { RetryPolicyFactory } from "./RetryPolicyFactory";
import { TelemetryPolicyFactory } from "./TelemetryPolicyFactory";
import { UniqueRequestIDPolicyFactory } from "./UniqueRequestIDPolicyFactory";
import { SERVICE_VERSION } from "./utils/constants";
export { deserializationPolicy };
/**
 * A ServiceURL represents a based URL class for ServiceURL, ContainerURL and etc.
 *
 * @export
 * @class StorageURL
 */
var StorageURL = /** @class */ (function () {
    /**
     * Creates an instance of StorageURL.
     * @param {string} url
     * @param {Pipeline} pipeline
     * @memberof StorageURL
     */
    function StorageURL(url, pipeline) {
        this.url = url;
        this.pipeline = pipeline;
        this.storageClientContext = new StorageClientContext(url, SERVICE_VERSION, pipeline.toServiceClientOptions());
    }
    /**
     * A static method used to create a new Pipeline object with Credential provided.
     *
     * @static
     * @param {Credential} credential Such as AnonymousCredential, SharedKeyCredential or TokenCredential.
     * @param {INewPipelineOptions} [pipelineOptions] Optional. Options.
     * @returns {Pipeline} A new Pipeline object.
     * @memberof Pipeline
     */
    StorageURL.newPipeline = function (credential, pipelineOptions) {
        if (pipelineOptions === void 0) { pipelineOptions = {}; }
        // Order is important. Closer to the API at the top & closer to the network at the bottom.
        // The credential's policy factory must appear close to the wire so it can sign any
        // changes made by other factories (like UniqueRequestIDPolicyFactory)
        var factories = [];
        factories.push(new TelemetryPolicyFactory(pipelineOptions.telemetry));
        factories.push(new UniqueRequestIDPolicyFactory());
        factories.push(new BrowserPolicyFactory());
        factories.push(deserializationPolicy()); // Default deserializationPolicy is provided by protocol layer
        factories.push(new RetryPolicyFactory(pipelineOptions.retryOptions));
        factories.push(new LoggingPolicyFactory());
        factories.push(credential);
        return new Pipeline(factories, {
            HTTPClient: pipelineOptions.httpClient,
            logger: pipelineOptions.logger
        });
    };
    return StorageURL;
}());
export { StorageURL };
//# sourceMappingURL=StorageURL.js.map