import * as msRest from "ms-rest-js";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a AppendBlob. */
export declare class AppendBlob {
    private readonly client;
    /**
     * Create a AppendBlob.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * The Create Append Blob operation creates a new append blob.
     *
     * @param {number} contentLength The length of the request.
     *
     * @param {AppendBlobCreateOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    create(contentLength: number): Promise<Models.AppendBlobCreateResponse>;
    create(contentLength: number, options: Models.AppendBlobCreateOptionalParams): Promise<Models.AppendBlobCreateResponse>;
    create(contentLength: number, callback: msRest.ServiceCallback<void>): void;
    create(contentLength: number, options: Models.AppendBlobCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob.
     * The Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.
     *
     * @param {msRest.HttpRequestBody} body Initial data
     *
     * @param {number} contentLength The length of the request.
     *
     * @param {AppendBlobAppendBlockOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    appendBlock(body: msRest.HttpRequestBody, contentLength: number): Promise<Models.AppendBlobAppendBlockResponse>;
    appendBlock(body: msRest.HttpRequestBody, contentLength: number, options: Models.AppendBlobAppendBlockOptionalParams): Promise<Models.AppendBlobAppendBlockResponse>;
    appendBlock(body: msRest.HttpRequestBody, contentLength: number, callback: msRest.ServiceCallback<void>): void;
    appendBlock(body: msRest.HttpRequestBody, contentLength: number, options: Models.AppendBlobAppendBlockOptionalParams, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=appendBlob.d.ts.map