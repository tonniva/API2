import * as msRest from "ms-rest-js";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a Container. */
export declare class Container {
    private readonly client;
    /**
     * Create a Container.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * creates a new container under the specified account. If the container with the same name already
     * exists, the operation fails
     *
     * @param {ContainerCreateOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    create(): Promise<Models.ContainerCreateResponse>;
    create(options: Models.ContainerCreateOptionalParams): Promise<Models.ContainerCreateResponse>;
    create(callback: msRest.ServiceCallback<void>): void;
    create(options: Models.ContainerCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * returns all user-defined metadata and system properties for the specified container. The data
     * returned does not include the container's list of blobs
     *
     * @param {ContainerGetPropertiesOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getProperties(): Promise<Models.ContainerGetPropertiesResponse>;
    getProperties(options: Models.ContainerGetPropertiesOptionalParams): Promise<Models.ContainerGetPropertiesResponse>;
    getProperties(callback: msRest.ServiceCallback<void>): void;
    getProperties(options: Models.ContainerGetPropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * operation marks the specified container for deletion. The container and any blobs contained
     * within it are later deleted during garbage collection
     *
     * @param {ContainerDeleteMethodOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deleteMethod(): Promise<Models.ContainerDeleteResponse>;
    deleteMethod(options: Models.ContainerDeleteMethodOptionalParams): Promise<Models.ContainerDeleteResponse>;
    deleteMethod(callback: msRest.ServiceCallback<void>): void;
    deleteMethod(options: Models.ContainerDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     *
     * @param {ContainerSetMetadataOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    setMetadata(): Promise<Models.ContainerSetMetadataResponse>;
    setMetadata(options: Models.ContainerSetMetadataOptionalParams): Promise<Models.ContainerSetMetadataResponse>;
    setMetadata(callback: msRest.ServiceCallback<void>): void;
    setMetadata(options: Models.ContainerSetMetadataOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * gets the permissions for the specified container. The permissions indicate whether container
     * data may be accessed publicly.
     *
     * @param {ContainerGetAccessPolicyOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getAccessPolicy(): Promise<Models.ContainerGetAccessPolicyResponse>;
    getAccessPolicy(options: Models.ContainerGetAccessPolicyOptionalParams): Promise<Models.ContainerGetAccessPolicyResponse>;
    getAccessPolicy(callback: msRest.ServiceCallback<Models.SignedIdentifier[]>): void;
    getAccessPolicy(options: Models.ContainerGetAccessPolicyOptionalParams, callback: msRest.ServiceCallback<Models.SignedIdentifier[]>): void;
    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a
     * container may be accessed publicly.
     *
     * @param {ContainerSetAccessPolicyOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    setAccessPolicy(): Promise<Models.ContainerSetAccessPolicyResponse>;
    setAccessPolicy(options: Models.ContainerSetAccessPolicyOptionalParams): Promise<Models.ContainerSetAccessPolicyResponse>;
    setAccessPolicy(callback: msRest.ServiceCallback<void>): void;
    setAccessPolicy(options: Models.ContainerSetAccessPolicyOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration
     * can be 15 to 60 seconds, or can be infinite
     *
     * @param {ContainerAcquireLeaseOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    acquireLease(): Promise<Models.ContainerAcquireLeaseResponse>;
    acquireLease(options: Models.ContainerAcquireLeaseOptionalParams): Promise<Models.ContainerAcquireLeaseResponse>;
    acquireLease(callback: msRest.ServiceCallback<void>): void;
    acquireLease(options: Models.ContainerAcquireLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration
     * can be 15 to 60 seconds, or can be infinite
     *
     * @param {string} leaseId Specifies the current lease ID on the resource.
     *
     * @param {ContainerReleaseLeaseOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    releaseLease(leaseId: string): Promise<Models.ContainerReleaseLeaseResponse>;
    releaseLease(leaseId: string, options: Models.ContainerReleaseLeaseOptionalParams): Promise<Models.ContainerReleaseLeaseResponse>;
    releaseLease(leaseId: string, callback: msRest.ServiceCallback<void>): void;
    releaseLease(leaseId: string, options: Models.ContainerReleaseLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration
     * can be 15 to 60 seconds, or can be infinite
     *
     * @param {string} leaseId Specifies the current lease ID on the resource.
     *
     * @param {ContainerRenewLeaseOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    renewLease(leaseId: string): Promise<Models.ContainerRenewLeaseResponse>;
    renewLease(leaseId: string, options: Models.ContainerRenewLeaseOptionalParams): Promise<Models.ContainerRenewLeaseResponse>;
    renewLease(leaseId: string, callback: msRest.ServiceCallback<void>): void;
    renewLease(leaseId: string, options: Models.ContainerRenewLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration
     * can be 15 to 60 seconds, or can be infinite
     *
     * @param {ContainerBreakLeaseOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    breakLease(): Promise<Models.ContainerBreakLeaseResponse>;
    breakLease(options: Models.ContainerBreakLeaseOptionalParams): Promise<Models.ContainerBreakLeaseResponse>;
    breakLease(callback: msRest.ServiceCallback<void>): void;
    breakLease(options: Models.ContainerBreakLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration
     * can be 15 to 60 seconds, or can be infinite
     *
     * @param {string} leaseId Specifies the current lease ID on the resource.
     *
     * @param {string} proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service
     * returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid
     * Constructor (String) for a list of valid GUID string formats.
     *
     * @param {ContainerChangeLeaseOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    changeLease(leaseId: string, proposedLeaseId: string): Promise<Models.ContainerChangeLeaseResponse>;
    changeLease(leaseId: string, proposedLeaseId: string, options: Models.ContainerChangeLeaseOptionalParams): Promise<Models.ContainerChangeLeaseResponse>;
    changeLease(leaseId: string, proposedLeaseId: string, callback: msRest.ServiceCallback<void>): void;
    changeLease(leaseId: string, proposedLeaseId: string, options: Models.ContainerChangeLeaseOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * [Update] The List Blobs operation returns a list of the blobs under the specified container
     *
     * @param {ContainerListBlobFlatSegmentOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listBlobFlatSegment(): Promise<Models.ContainerListBlobFlatSegmentResponse>;
    listBlobFlatSegment(options: Models.ContainerListBlobFlatSegmentOptionalParams): Promise<Models.ContainerListBlobFlatSegmentResponse>;
    listBlobFlatSegment(callback: msRest.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;
    listBlobFlatSegment(options: Models.ContainerListBlobFlatSegmentOptionalParams, callback: msRest.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;
    /**
     * [Update] The List Blobs operation returns a list of the blobs under the specified container
     *
     * @param {string} delimiter When the request includes this parameter, the operation returns a
     * BlobPrefix element in the response body that acts as a placeholder for all blobs whose names
     * begin with the same substring up to the appearance of the delimiter character. The delimiter may
     * be a single character or a string.
     *
     * @param {ContainerListBlobHierarchySegmentOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    listBlobHierarchySegment(delimiter: string): Promise<Models.ContainerListBlobHierarchySegmentResponse>;
    listBlobHierarchySegment(delimiter: string, options: Models.ContainerListBlobHierarchySegmentOptionalParams): Promise<Models.ContainerListBlobHierarchySegmentResponse>;
    listBlobHierarchySegment(delimiter: string, callback: msRest.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;
    listBlobHierarchySegment(delimiter: string, options: Models.ContainerListBlobHierarchySegmentOptionalParams, callback: msRest.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;
    /**
     * Returns the sku name and account kind
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getAccountInfo(): Promise<Models.ContainerGetAccountInfoResponse>;
    getAccountInfo(options: msRest.RequestOptionsBase): Promise<Models.ContainerGetAccountInfoResponse>;
    getAccountInfo(callback: msRest.ServiceCallback<void>): void;
    getAccountInfo(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=container.d.ts.map